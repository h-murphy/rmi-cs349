import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.*;
import java.rmi.RemoteException;

public class Client extends UnicastRemoteObject implements IMClient{
  String userName;
  
  public Client(String n) throws RemoteException{
      super();
      userName = n;
      
    
  }
  
  public String getUserName(){
    return userName;
  }
  
  public void receiveMessage(String messageText){
    System.out.println(messageText);
  }
  public static void main(String[] args){

    System.out.println("Client Ready\n");
    
    System.out.println("register-name: to register the client's user name.");
    

    String host = (args.length < 1) ? null : args[0];
    try {
      
      //Capitalize stub = null;
      ServerImpl obj = new ServerImpl();
      
      Registry registry = LocateRegistry.getRegistry();
      ServerInt stub = (ServerInt) registry.lookup("InitialConnection");
      
      // Bind the remote object's stub in the registry
      //System.out.println("About to bind registry
      //registry.bind("InitialConnection", stub);
      
      //Registry registry = LocateRegistry.getRegistry(host);
      String userNameForSending = "";
      boolean active = true;
      String input = System.console().readLine();
      Client newUser;
      if(input.substring(0,8).equals("register")){
        String newUserName = input.substring(9);
        newUser = new Client(newUserName);
        userNameForSending = newUserName;
        System.out.println("Made new Client");
        //String registerUserOnServer(Client newClient) throws RemoteException
        String c = (String) stub.registerUserOnServer((IMClient)newUser);
        System.out.println("Registered User on Server");
        //newUser = stub.registerUserOnServer(newUserName, );
        //ServerInt stub = (ServerInt) registry.lookup(newUserName);
        System.out.println("You are now registered as " + newUserName + ".");
        
      }
      
      System.out.println("***COMMANDS***");
      System.out.println("get: to get the list of names from the server's directory");
      System.out.println("snd-name-text: to isntantly send a test message to name.");
      System.out.println("quit: to quit the application.\n");

      while(active){
       if(stub != null){
        String command = System.console().readLine();
        System.out.println("Command: " + command);
        if(command.equals("get")){ //returns list of usernames
            System.out.println("Trying to get usernames");
            String output = stub.getUsers();
            System.out.println(output);
          }else if(command.equals("quit")){
            active = false;
            System.out.println("Quitting Session");
          }else if(command.substring(0,3).equals("snd")){
            String userTo = command.substring(command.indexOf('-')+1, command.lastIndexOf('-'));
            System.out.println(userTo);
            String message = command.substring(command.lastIndexOf('-') + 1);
            String t = stub.sendMessage(userTo, message, userNameForSending);
            System.out.println(t);
            System.out.println(message);
            
            //String value = stub.sendMessage(userTo, message);
            //System.out.println(value);
          }
       }
      }
    }catch(Exception e){
      System.out.println("Exception in Client: " + e.toString());
    }
    
  }
}




//import java.rmi.registry.LocateRegistry;
//import java.rmi.registry.Registry;
//import java.rmi.server.*;
//import java.rmi.RemoteException;
//
//public class Client extends UnicastRemoteObject implements IMClient{
//  String name;
//  
//  private Client(String n) throws RemoteException{
//    super();
//    this.name = n;
//  }
//  
//  public void receiveMessage(String messageText) throws RemoteException{
//    System.out.println(messageText);
//  }
//  public void initializeServerConnection() throws RemoteException{
//    try{
//    ServerImpl obj = new ServerImpl();
//      
//    Registry registry = LocateRegistry.getRegistry();
//    ServerInt stub = (ServerInt) registry.lookup("InitialConnection");
//    
//    }catch(Exception e){
//    }
//  }
//  
//  public static Client registerUser(String name){
//    try{
//    ServerImpl obj = new ServerImpl();
//      
//    Registry registry = LocateRegistry.getRegistry();
//    
//    ServerInt stub = (ServerInt) registry.lookup("InitialConnection");
//    
//    Client newUser = new Client(name);
//    
//    String newUserName = stub.registerUserOnServer(name, newUser);
//    stub = (ServerInt) registry.lookup(newUserName);
//    
//    return newUser;
//    }catch(Exception e){
//    }
//    return null;
//  }
//  
//  
//  public String getName(){
//    
//  return "";
//  }
//  
//  public String getMessage(){
//    return"";
//  }
//  
//  
//  public static void main(String[] args) {
//    
//    System.out.println("Client Ready");
//    String host = (args.length < 1) ? null : args[0];
//    try {
//      
//      //Capitalize stub = null;
//      ServerImpl obj = new ServerImpl();
//      
//      Registry registry = LocateRegistry.getRegistry();
//     // Capitalize stub = (Capitalize) registry.lookup("InitialConnection");
//      
//      // Bind the remote object's stub in the registry
//      
//      //registry.bind("InitialConnection", stub);
//      
//      // Registry registry = LocateRegistry.getRegistry(host);
//      
//      boolean active = true;
//      String input = System.console().readLine();
//      Client newUser;
//      if(input.substring(0,8).equals("register")){
//        String newUserName = input.substring(9);
//        newUser = registerUser(newUserName);
//        ServerInt stub = (ServerInt) registry.lookup(newUserName);
//        System.out.println("You are now registered as " + newUserName + ".");
//      
//      System.out.println("Input Commands Now: ");
//      while(active){
//        //if(stub != null){
//        String command = System.console().readLine();
//          if (command.equals("get")){ //returns list of usernames
//            //String output = stub.prettyPrint();
//            //System.out.println(output);
//          }else if(command.equals("quit")){
//            active = false;
//            System.out.println("Quitting Session");
//          }else if(command.substring(0,3).equals("snd")){
//            String userTo = command.substring(command.indexOf('-')+1, command.lastIndexOf('-'));
//            System.out.println(userTo);
//            String message = command.substring(command.lastIndexOf('-') + 1);
//     
//            System.out.println(message);
//            
//            String value = stub.sendMessage(userTo, message);
//            System.out.println(value);
//          }
//          
//        //}
//      }
//      }
//    } catch (Exception e) {
//      System.err.println("Client exception: " + e.toString());
//      e.printStackTrace();
//    }
//    System.out.println("Session Has Ended");
//  }
//}
